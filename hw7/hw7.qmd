---
title: Homework 7 - Creating a resume database
author: Bryan Lizama Montecino
date: November 10, 2023
format:
    html:
        theme: minty
        toc: true
        embed-resources: true
        code-copy: true
---

This file constains information that shows the structure which allows for versatile queries, enabling a company to easily find employees with specific skills, identify skill gaps in certain roles, and effectively manage the workforce.

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-bryanmontecino>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```

```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key]).strip()
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```

```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```

```{python}
#| echo: false
#| eval: true

# !
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The database project is designed to manage and represent the collective skills and roles of employees within a company.

* Aims to facilitate the identification of specific skills and roles within the organization, helping in resource allocation.
* The database consists of the following tables:

skills
: Stores different skills or certifications with details like name, description, and associated URLs.

people
: Contains information about the company's employees, including names, contact details, professional links, and a brief bio.

peopleskills
: A junction table linking employees to their respective skills, along with the dates these skills were acquired.

roles
: Lists various roles within the company, such as Designer, Developer, etc., along with a sort priority for organizational purposes.

peopleroles
: Associates employees with their roles in the company and tracks the date when these roles were assigned.

## Crows-foot diagram

Description of Crows-foot Diagram.

```{mermaid}
erDiagram
    PEOPLE ||--o{ PEOPLESKILLS : has
    PEOPLE ||--o{ PEOPLESROLES : performs
    PEOPLESKILLS }o--|| SKILLS : acquired_by
    ROLES ||--o{ PEOPLESROLES : assigned_to

    PEOPLE {
        int id "Primary Key"
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        date date_joined
    }

    SKILLS {
        int id "Primary Key"
        string name
        string description
        string tag
        string url
        string time_commitment
    }

    PEOPLESKILLS {
        int id "Primary Key"
        int skills_id "Foreign Key to SKILLS"
        int people_id "Foreign Key to PEOPLE"
        date date_acquired
    }

    ROLES {
        int id "Primary Key"
        string name
        int sort_priority
    }

    PEOPLESROLES {
        int id "Primary Key"
        int people_id "Foreign Key to PEOPLE"
        int role_id "Foreign Key to ROLES"
        date date_assigned
    }
```

## Examples of data in the database

For the people, skills, and roles tables, I will provide a description of each table and it's contents.
- Followign that, I will provide a listing of the entire table.

### People table

The *people* table is a crucial part of the database, containing detailed information about each employee within the company

It includes various fields to describe personal and professional attributes of the employees. The key elements in this table are:

* id: identifier for each employee.
* first_name and last_name: first and last names of the employee.
* email: email address of the employee.
* linkedin_url: URL linking to the employee's LinkedIn profile.
* headshot_url: URL to a headshot image of the employee.
* discord_handle: employee's Discord username or handle.
* brief_bio: short description of the employee.
* date_joined: date when the employee joined the company.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT * FROM people;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table is an integral component of the database, cataloging various skills and certifications that can be possessed by employees. 

This table is pivotal for tracking and managing the skillset within the organization. It includes fields that provide detailed information about each skill or certification. The key elements in this table are:

* id: unique identifier for each skill.
* name: name of the skill.
* description: brief description of the skill or certification, explaining its nature and scope.
* tag: category tag that labels and classifies each skill.
* url: URL pointing to resources about the skill.
* time_commitment: estimated time commitment required to acquire/master the skill.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT * FROM skills
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table is a key part of the database, designed to define and organize the various job roles within the company. It plays a crucial role in structuring the company's hierarchy and understanding the distribution of responsibilities. This table includes:

* id: unique identifier for each role within the company.
* name: name of the role, such as Developer, Designer, Team Lead, etc.
* sort_priority: integer representing sorting priority of the role, which can be used to organize roles in a specific order.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT * FROM roles
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

Sample:
```{python}
sql = f"""
SELECT * FROM people
"""
```

Result:
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

# List skill names, tags, and descriptions ordered by name
```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT name, tag, description FROM skills 
ORDER BY name;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and email addresses ordered by last_name
```{python}
#| echo: false
#| eval: true
sql = """
SELECT first_name, last_name, email FROM people 
ORDER BY last_name;
"""

try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1
```{python}
#| echo: false
#| eval: true
sql = """
SELECT s.name FROM skills s
JOIN peopleskills ps ON s.id = ps.skills_id
JOIN people p ON ps.people_id = p.id
WHERE p.id = 1;
"""

try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6
```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT p.first_name, p.last_name FROM people p
JOIN peopleskills ps ON p.id = ps.people_id
JOIN skills s ON ps.skills_id = s.id
WHERE s.id = 6;
"""

try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role
```{python}
#| echo: false
#| eval: true
sql = """
SELECT p.first_name, p.last_name FROM people p
JOIN peopleroles pr ON p.id = pr.people_id
JOIN roles r ON pr.role_id = r.id
WHERE r.name = 'Developer';
"""

try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills
```{python}
#| echo: false
#| eval: true
sql = """
SELECT p.first_name, p.last_name, p.email FROM people p
LEFT JOIN peopleskills ps ON p.id = ps.people_id
WHERE ps.people_id IS NULL;
"""

try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills
```{python}
#| echo: false
#| eval: true
sql = """
SELECT s.name, s.tag FROM skills s
LEFT JOIN peopleskills ps ON s.id = ps.skills_id
WHERE ps.skills_id IS NULL;
"""

try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role
```{python}
#| echo: false
#| eval: true
sql = """
SELECT p.first_name, p.last_name, s.name AS skill_name FROM people p
JOIN peopleroles pr ON p.id = pr.people_id
JOIN roles r ON pr.role_id = r.id
JOIN peopleskills ps ON p.id = ps.people_id
JOIN skills s ON ps.skills_id = s.id
WHERE r.name = 'Boss';
"""

try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles
```{python}
#| echo: false
#| eval: true
sql = """
SELECT r.id, r.name FROM roles r
LEFT JOIN peopleroles pr ON r.id = pr.role_id
WHERE pr.role_id IS NULL;
"""

try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

The past assignments we have done have been interesting and thought provoking, but this one is the one that I learned the most from. Once I created tables with the DDL file, it was amazing when I visited the phpMyAdmin website and I saw what I added to the DDL file was live on the website. I thought it was super useful to have the queries at the bottom of the QMD because it allowed us to see how we are able to extract information from the DDL/database. I do have to say that the template we were given was what set the path for students because it was clear and working as far as the connection goes. Overall, I liked this assignment more than any of the other ones just because we used SQL, along with the DDL file.